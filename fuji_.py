# -*- coding: utf-8 -*-
"""fuji .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dcjngm3Yj7rnai0GJOJ7VJHm0CTCVNJT

FUJI
"""

import numpy as np
csv_path="mtfuji_data.csv"
np.set_printoptions(suppress=True)
fuji=np.loadtxt(csv_path,delimiter=",",skiprows=1)
print(fuji.shape)
print(fuji[130:140])

import matplotlib.pyplot as plt
plt.title("MTFUJI")
plt.xlabel("positions")
plt.ylabel("elevation")
plt.plot(fuji[:,0],fuji[:,3])
plt.show

def calc_slope(point):
    change_elevation = fuji[:, 0][point]-fuji[:,0][point-1]
    change_position = fuji[:, 3][point]-fuji[:,3][point-1]
    slope =     change_position/change_elevation
    return slope
print(calc_slope(0))

def calc_destination(current_point, alpha, slope):
    destination_point = current_point-alpha*slope
    if(destination_point <= 0):
        return 0
    else:
        return round(destination_point)
alpha = 0.2
current_point = 0
slope =calc_slope(current_point)
print(calc_destination(current_point, alpha, slope))

def calc_goingdown_mtfuji(current_position_1,alpha_1):
    slope_1= calc_slope(current_position_1)
    positions=[current_position_1]
    for counter in range(fuji.size):
       current_position_1 = int(calc_destination(current_position_1,alpha-1,slope_1))
       if (positions[-1]== current_position_1):
            break
       else:
            positions.append(current_position_1)
    return positions
alpha_2 = 0.2
print(calc_goingdown_mtfuji(136,alpha_2))

positions_array=calc_goingdown_mtfuji(136,alpha_2)
figure=plt.figure(figsize=(15,5))
fig1=figure.add_subplot(1,2,1)
fig1.set_title("MT. FUJI MOVEMENT POINT")
fig1.set_xlabel("position")
fig1.set_ylabel("elevation(m)")
fig1.plot(fuji[:,0],fuji[:,3],linewidth=2)
fig1.scatter(positions_array,[fuji[position_2,3] for position_2 in positions_array], c="violet",linewidth=5)


fig2=figure.add_subplot(1,2,2)
fig2.set_title("ALTITUDE")
fig2.set_xlabel("slope")
fig2.set_ylabel("elevation(m)")
fig2.plot(positions_array,[fuji[position_2,3]for position_2 in positions_array],color="red", label="elevation",linewidth=2)
fig2.plot(positions_array,[calc_slope(position_2) for position_2 in positions_array],c="green", label="slope",linewidth=5)
fig2.legend()
plt.show()

